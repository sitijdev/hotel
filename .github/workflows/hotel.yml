# Nama workflow yang deskriptif dan mudah dikenali di GitHub Actions UI.
name: Convert CSV to JSON and Push with LFS

# Trigger workflow. 'workflow_dispatch' memungkinkan eksekusi manual dari tab Actions.
on:
  workflow_dispatch:

# Definisi job tunggal untuk konversi.
jobs:
  convert-and-push:
    # Menentukan environment untuk menjalankan job. 'ubuntu-latest' adalah pilihan yang stabil.
    runs-on: ubuntu-latest
    
    # Memberikan izin tulis untuk konten repositori agar bisa push.
    permissions:
      contents: write

    # Langkah-langkah (steps) yang akan dijalankan secara berurutan.
    steps:
    - name: Checkout repository
      # Menggunakan action resmi untuk checkout kode repositori.
      uses: actions/checkout@v4
      with:
        # 'fetch-depth: 0' penting untuk Git LFS agar dapat bekerja dengan riwayat penuh file.
        fetch-depth: 0

    - name: Set up Git LFS
      # Langkah ini memastikan LFS diinstal dan dikonfigurasi pada runner.
      run: git lfs install

    - name: Set up Python
      # Menggunakan action resmi untuk mengatur lingkungan Python.
      uses: actions/setup-python@v5
      with:
        # Menentukan versi Python yang akan digunakan.
        python-version: '3.x'

    - name: Install dependencies
      # Menginstal library Python yang diperlukan.
      run: pip install pandas

    - name: Download CSV and Convert to JSON
      # Skrip ini mengunduh dan mengonversi data.
      run: |
        CSV_URL="https://trip.lareward.com/hotel.csv"
        CSV_FILE="hotel.csv"
        JSON_FILE="hotel.json"

        echo "Mulai mengunduh file CSV dari $CSV_URL..."
        curl -L $CSV_URL -o $CSV_FILE --progress-bar
        
        if [ ! -f "$CSV_FILE" ]; then
          echo "Error: File CSV gagal diunduh."
          exit 1
        fi
        echo "Unduh CSV selesai. Ukuran: $(du -sh $CSV_FILE | awk '{print $1}')"

        echo "Memulai konversi CSV ke JSON..."
        python -c "
        import pandas as pd
        import json
        import os

        csv_file = '$CSV_FILE'
        json_file = '$JSON_FILE'
        chunksize = 50000

        with open(json_file, 'w', encoding='utf-8') as f:
            f.write('[\n')

        first_chunk_record = True
        
        # Menggunakan iterator untuk efisiensi memori
        for i, chunk in enumerate(pd.read_csv(csv_file, chunksize=chunksize, dtype=str, on_bad_lines='warn')):
            print(f'  Memproses chunk {i+1}...')
            records = chunk.where(pd.notna(chunk), None).to_dict(orient='records')
            
            with open(json_file, 'a', encoding='utf-8') as f:
                for record in records:
                    if not first_chunk_record:
                        f.write(',\n')
                    json.dump(record, f, ensure_ascii=False, indent=2)
                    first_chunk_record = False

        with open(json_file, 'a', encoding='utf-8') as f:
            f.write('\n]\n')

        print('Konversi selesai!')
        print(f'Ukuran file JSON yang dihasilkan: {os.path.getsize(json_file) / (1024 * 1024):.2f} MB')
        "
        if [ ! -f "$JSON_FILE" ]; then
          echo "Error: File JSON tidak berhasil dibuat."
          exit 1
        fi

    - name: Commit and Push changes
      # Mengonfigurasi identitas Git, menambahkan file, commit, dan push.
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Menambahkan file JSON ke staging area. LFS akan menanganinya secara otomatis.
        git add hotel.json
        
        # Commit hanya jika ada perubahan pada file yang dilacak
        # 'git diff --quiet --cached ||' akan melanjutkan ke commit jika ada perubahan
        git diff --quiet --cached || git commit -m "Update hotel.json from latest CSV"
        
        # Push perubahan ke branch main. LFS akan mengunggah pointer ke GitHub
        # dan file sebenarnya ke penyimpanan LFS.
        git push origin main
